// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  firstName    String
  lastName     String
  password     String
  role         Role
  teacher      Teacher?
  student      Student?
  parent       Parent?
  Announcement Announcement[]
  Message      Message[]      @relation(name: "sender")
  Message2     Message[]      @relation(name: "receiver")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

model Teacher {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id])
  subjects Subject[]
  classes  Class[]
}

model Student {
  id         Int          @id @default(autoincrement())
  userId     Int          @unique
  user       User         @relation(fields: [userId], references: [id])
  classes    Class[]
  parentId   Int?
  parent     Parent?      @relation(fields: [parentId], references: [id])
  Attendance Attendance[]
  Gradebook  Gradebook[]
  ExamResult ExamResult[]
}

model Parent {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id])
  students Student[]
}

model Class {
  id         Int          @id @default(autoincrement())
  name       String
  teacherId  Int?
  teacher    Teacher?     @relation(fields: [teacherId], references: [id])
  students   Student[]
  homework   Homework[]
  exams      Exam[]
  attendance Attendance[]
}

model Subject {
  id        Int         @id @default(autoincrement())
  name      String
  teacherId Int
  teacher   Teacher     @relation(fields: [teacherId], references: [id])
  gradebook Gradebook[]
}

model Attendance {
  id        Int              @id @default(autoincrement())
  date      DateTime
  status    AttendanceStatus
  studentId Int
  student   Student          @relation(fields: [studentId], references: [id])
  classId   Int
  class     Class            @relation(fields: [classId], references: [id])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

model Gradebook {
  id        Int     @id @default(autoincrement())
  subjectId Int
  studentId Int
  student   Student @relation(fields: [studentId], references: [id])
  score     Float
  Subject   Subject @relation(fields: [subjectId], references: [id])
}

model Homework {
  id          Int      @id @default(autoincrement())
  subjectId   Int
  description String
  dueDate     DateTime
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  subjectId Int
  date      DateTime
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
}

model ExamResult {
  id        Int     @id @default(autoincrement())
  examId    Int
  studentId Int
  student   Student @relation(fields: [studentId], references: [id])
  score     Float
}

model Announcement {
  id       Int      @id @default(autoincrement())
  title    String
  content  String
  date     DateTime
  authorId Int
  author   User     @relation(fields: [authorId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  date       DateTime
  senderId   Int
  receiverId Int
  sender     User     @relation(name: "sender", fields: [senderId], references: [id])
  receiver   User     @relation(name: "receiver", fields: [receiverId], references: [id])
}

model CalendarEvent {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
}
